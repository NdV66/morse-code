{"version":3,"sources":["ui/pages/translatorPage/components/buttonPanel/ButtonPanel.module.scss","ui/nav/NavbarApp.module.scss","ui/pages/helpPage/HelpPage.module.scss","ui/pages/translatorPage/components/textArea/TextArea.module.scss","ui/pages/translatorPage/translatorPageStyle.module.scss","ui/pages/aboutPage/AboutPage.module.scss","ui/pages/footer/Footer.module.scss","ui/pages/translatorPage/components/textArea/TextArea.jsx","ui/common/ErrorPopup.jsx","entities/consts/Texts.js","ui/pages/translatorPage/components/buttonPanel/ButtonPanel.jsx","entities/consts/Paths.js","ui/pages/translatorPage/TranslatorPage.jsx","ui/nav/NavbarApp.jsx","entities/consts/MorseCodeMapping.js","entities/consts/ErrorsCode.js","entities/models/Message.js","entities/models/MorseMessage.js","entities/domain/TextToMorseTranslator.js","entities/models/TextMessage.js","entities/models/MorseTreeNode.js","entities/models/MorseTree.js","entities/domain/MorseToTextTranslator.js","stores/translatorStore.jsx","stores/navbarStore.js","ui/common/DescriptionPanel.jsx","ui/common/BiggerIcon.jsx","ui/pages/aboutPage/AboutPage.jsx","ui/pages/helpPage/HelpPage.jsx","ui/pages/footer/Footer.jsx","ui/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","button_in_panel","custom_toggler","navbar-toggler","navbar-toggler-icon","custom_collapse","active-generic","btn-primary","active-hover","text-danger","rounded","no-margin","no-spaces","h3-light","no-padding","bg-light","help_page","bg-dark","radius","btn","btn-danger","common-padding","icon-style","base-top-bottom-padding","bigger-icon","help_icon","text_area","translator_container","about_page","footer","TextArea","props","react_default","a","createElement","className","title","styles","id","name","value","onChange","placeholder","readOnly","ErrorPopupModal","onCancel","isModal","Modal","isOpen","toggle","centered","autoFocus","ModalHeader","header","ModalBody","body","ModalFooter","Button","color","onClick","ErrorPopup","ReactDOM","createPortal","ErrorPopup_ErrorPopupModal","document","getElementById","TEXTS","NAME","ABOUT","HELP","TRANSLATOR","TEXT_AREA_PLACEHOLDER","MORSE_AREA_PLACEHOLDER","TRANSLATE","TEXT_LABEL","MORSE_LABEL","SWAP","GITHUB","OTHER_PROJECTS","BE_STAR_ONLINE","MY_SITE","DEV_NAMES_GENERATOR","HERBACIANKA","THIS_SITE_CODE","AUTHOR","ERRORS_DESC","ERROR_HEADER","DATA_SHOULD_BE_STRING","DATA_SHOULD_BE_MORSE","CHAR_DOESNT_EXIST","MORSE_SIGN_ISNT_SUPPORTED","ABOUT_HEADER","ABOUT_TEXT","APP_HEADER","APP","AUTHOR_HEADER","HELP_HEADER","HELP_TEXT","USING_HEADER","USING","FORMAT_HEADER","FORMAT","ButtonPanel","onClickTranslateButton","index_esm","onClickSwapButton","ELEMENTS_ID","HOME","createLink","element","concat","PATHS","TranslatorPage","inject","action","bound","observer","event","this","translatorStore","setNormalTextFromEvent","setMorseCodeFromEvent","translate","error","_handleError","swapTextAreas","console","log","setErrorCode","message","store","textArea_TextArea","normalText","_handleNormalTextAreaChange","key","isCommonTextAreaFirst","morseCode","_handleMorseCodeTextAreaChange","buttonPanel_ButtonPanel","_onClickTranslateButton","_onClickSwapButton","normalTextArea","_renderNormalTextArea","morseCodeArea","_renderMorseTextArea","buttonPanel","_renderButtonPanel","common_ErrorPopup","isError","eraseErrorCode","errorCode","containerCssClass","errorPortal","_renderErrorPortal","Container","fluid","Col","lg","size","offset","md","_rendertTextAreaInOrder","React","Component","NavbarItem","NavItem","lib","smooth","to","NavbarApp","navbarStore","navbarCssClass","Navbar","expand","light","fixed","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavbarApp_NavbarItem","MORSE_CODE_PATTERN","MorseCode","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0",",",".","?",";",":","/","-","'","()","_","@"," ","ERRORS_CODE","MESSAGE_TYPES","TEXT","MORSE","UNDEFINED","Message","type","arguments","length","undefined","text","Object","classCallCheck","_text","_type","MorseMessage","possibleConstructorReturn","getPrototypeOf","call","test","Error","textToMorseTranslator","textMessage","translated","textMessageChars","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","char","morseCodeChar","toUpperCase","push","err","return","separator","join","joinToString","_mapTextToMorse","_joinMorseCodeFromArray","TextMessage","toString","TreeNode","leftNode","rightNode","symbol","chars","currentIndex","parent","foundNode","node","currentChar","isFinish","_goToLeftNode","_goToRightNode","_goToNode","_setDataInNextNode","findSymbol","_startNextNode","_findInNodes","nodesWithoutChildrens","symbols","result","createNodesWithoutChildren","emptyU2","emptyO90","emptyO8","emptyREmpty","v","h","j","b","x","z","s","u","r","w","o","g","k","d","i","m","n","t","e","start","searchSymbol","upperCased","morseToTextTranslator","morseCodeSigns","prepared","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","sign","morseMessage","_prepareMorseCodeToTranslate","_translateFromMorseCode","translatedToMorseCode","translatedToNormalText","translateToMorseCode","translateToNormalText","target","observable","computed","DescriptionPanel","content","dangerouslySetInnerHTML","__html","texts","_createElement","cssClassName","BiggerIcon","icon","_createParagraphs","iconClassName","AboutPage","common_DescriptionPanel","MdLocalFlorist","HelpPage","MdHelp","footerCssClass","ProjectLink","Footer","Row","sm","Footer_ProjectLink","iconContextStyle","App","esm","Provider","index_module","react_router_dom","ui_nav_NavbarApp","translatorPage_TranslatorPage","aboutPage_AboutPage","helpPage_HelpPage","Footer_Footer","Boolean","window","location","hostname","match","render","ui_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7475f8f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_in_panel\":\"ButtonPanel_button_in_panel__3KOvZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"custom_toggler\":\"NavbarApp_custom_toggler__3jH9h\",\"navbar-toggler\":\"NavbarApp_navbar-toggler__3-1jq\",\"navbar-toggler-icon\":\"NavbarApp_navbar-toggler-icon__3WRyb\",\"custom_collapse\":\"NavbarApp_custom_collapse__gXpTQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active-generic\":\"HelpPage_active-generic__mdhZx\",\"btn-primary\":\"HelpPage_btn-primary__23cZq\",\"active-hover\":\"HelpPage_active-hover__3yxmL\",\"text-danger\":\"HelpPage_text-danger__2ul61\",\"rounded\":\"HelpPage_rounded__2QInn\",\"no-margin\":\"HelpPage_no-margin__3ORxE\",\"no-spaces\":\"HelpPage_no-spaces__3fdWo\",\"h3-light\":\"HelpPage_h3-light__1S43G\",\"no-padding\":\"HelpPage_no-padding__mEZY9\",\"bg-light\":\"HelpPage_bg-light__2gIGt\",\"help_page\":\"HelpPage_help_page__27J4j\",\"bg-dark\":\"HelpPage_bg-dark__9NOVn\",\"radius\":\"HelpPage_radius__1rbXr\",\"btn\":\"HelpPage_btn__3FPYZ\",\"btn-danger\":\"HelpPage_btn-danger__3RKI8\",\"common-padding\":\"HelpPage_common-padding__3ih6T\",\"icon-style\":\"HelpPage_icon-style__v3awR\",\"base-top-bottom-padding\":\"HelpPage_base-top-bottom-padding__Yh2v-\",\"bigger-icon\":\"HelpPage_bigger-icon__1wPw8\",\"help_icon\":\"HelpPage_help_icon__2_Ue3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active-generic\":\"TextArea_active-generic__2kz14\",\"btn-primary\":\"TextArea_btn-primary__3XyAC\",\"active-hover\":\"TextArea_active-hover__3w4Oy\",\"text-danger\":\"TextArea_text-danger__1P4Mj\",\"rounded\":\"TextArea_rounded__38FL7\",\"no-margin\":\"TextArea_no-margin__awBiU\",\"no-spaces\":\"TextArea_no-spaces__1Ny3d\",\"h3-light\":\"TextArea_h3-light__-JFhY\",\"no-padding\":\"TextArea_no-padding__p7K6d\",\"bg-light\":\"TextArea_bg-light__rFdhM\",\"bg-dark\":\"TextArea_bg-dark__3sERC\",\"radius\":\"TextArea_radius__2GqWE\",\"btn\":\"TextArea_btn__307q-\",\"text_area\":\"TextArea_text_area__31xKz\",\"btn-danger\":\"TextArea_btn-danger__16pmp\",\"common-padding\":\"TextArea_common-padding__1LYfz\",\"icon-style\":\"TextArea_icon-style__2xa-T\",\"base-top-bottom-padding\":\"TextArea_base-top-bottom-padding__3Bx8R\",\"bigger-icon\":\"TextArea_bigger-icon__lvys-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active-generic\":\"translatorPageStyle_active-generic__25H3b\",\"btn-primary\":\"translatorPageStyle_btn-primary__2OiUt\",\"active-hover\":\"translatorPageStyle_active-hover__2nK86\",\"text-danger\":\"translatorPageStyle_text-danger__3fpQ7\",\"rounded\":\"translatorPageStyle_rounded__gTstx\",\"no-margin\":\"translatorPageStyle_no-margin__22fdO\",\"no-spaces\":\"translatorPageStyle_no-spaces__3imsV\",\"h3-light\":\"translatorPageStyle_h3-light__1JOAW\",\"no-padding\":\"translatorPageStyle_no-padding__3J-gh\",\"bg-light\":\"translatorPageStyle_bg-light__38jUr\",\"translator_container\":\"translatorPageStyle_translator_container__7O6QC\",\"bg-dark\":\"translatorPageStyle_bg-dark__193Bk\",\"radius\":\"translatorPageStyle_radius__1qKca\",\"btn\":\"translatorPageStyle_btn__1skfx\",\"btn-danger\":\"translatorPageStyle_btn-danger__1PGkm\",\"common-padding\":\"translatorPageStyle_common-padding__1OMwc\",\"icon-style\":\"translatorPageStyle_icon-style__20uUK\",\"base-top-bottom-padding\":\"translatorPageStyle_base-top-bottom-padding__2GeLC\",\"bigger-icon\":\"translatorPageStyle_bigger-icon__1f45n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active-generic\":\"AboutPage_active-generic__2m5xo\",\"btn-primary\":\"AboutPage_btn-primary__1pn0j\",\"active-hover\":\"AboutPage_active-hover__1XOps\",\"text-danger\":\"AboutPage_text-danger__Te0Fu\",\"rounded\":\"AboutPage_rounded__1M1x9\",\"no-margin\":\"AboutPage_no-margin__137VU\",\"no-spaces\":\"AboutPage_no-spaces__2bVwR\",\"h3-light\":\"AboutPage_h3-light__ajNbJ\",\"no-padding\":\"AboutPage_no-padding__2zgdr\",\"bg-light\":\"AboutPage_bg-light__24QTh\",\"bg-dark\":\"AboutPage_bg-dark__celDU\",\"radius\":\"AboutPage_radius__1F4D_\",\"btn\":\"AboutPage_btn__YmtxS\",\"btn-danger\":\"AboutPage_btn-danger__79zpz\",\"common-padding\":\"AboutPage_common-padding__3XbXr\",\"icon-style\":\"AboutPage_icon-style__3K1Pk\",\"base-top-bottom-padding\":\"AboutPage_base-top-bottom-padding__22pTo\",\"bigger-icon\":\"AboutPage_bigger-icon__ZjtHm\",\"about_page\":\"AboutPage_about_page__2WQxV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__T4aUr\"};","import React from 'react';\r\nimport styles from './TextArea.module.scss';\r\n\r\nconst TextArea = (props) => <div>\r\n    <h3 className='h3-light'>{props.title}</h3>\r\n    <textarea\r\n        className={styles.text_area}\r\n        id={props.id}\r\n        name={props.id}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        placeholder={props.placeholder}\r\n        readOnly={props.readOnly}\r\n    />\r\n</div>;\r\n\r\nexport default TextArea;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst ErrorPopupModal = (props) => {\r\n    const {onCancel, isModal} = props;\r\n    return <div>\r\n        <Modal\r\n            isOpen={isModal}\r\n            toggle={onCancel}\r\n            className=''\r\n            centered={true}\r\n            autoFocus={true}\r\n        >\r\n            <ModalHeader toggle={onCancel}>\r\n                {props.header}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                {props.body}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color='primary' onClick={onCancel}>OK</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    </div>;\r\n};\r\n\r\nErrorPopupModal.propTypes = {\r\n    onCancel: PropTypes.func.isRequired,\r\n    isModal: PropTypes.bool.isRequired,\r\n    body: PropTypes.string.isRequired,\r\n    header: PropTypes.string.isRequired,\r\n};\r\n\r\nconst ErrorPopup = (props) => ReactDOM.createPortal(<ErrorPopupModal {...props} />, document.getElementById('portal'));\r\n\r\nErrorPopup.propTypes = ErrorPopupModal.propTypes;\r\n\r\nexport default ErrorPopup;","const TEXTS = {\r\n    NAME: 'Morse Translator',\r\n    ABOUT: 'About',\r\n    HELP: 'Help',\r\n    TRANSLATOR: 'Translator',\r\n    TEXT_AREA_PLACEHOLDER: 'Write the text',\r\n    MORSE_AREA_PLACEHOLDER: 'Write some morse',\r\n    TRANSLATE: 'Translate',\r\n    TEXT_LABEL: 'Common text',\r\n    MORSE_LABEL: 'Morse code',\r\n    SWAP: 'Swap',\r\n    GITHUB: 'See my GitHub',\r\n    OTHER_PROJECTS: 'See my other projects',\r\n    BE_STAR_ONLINE: 'BB Code editor',\r\n    MY_SITE: 'My site',\r\n    DEV_NAMES_GENERATOR: 'Funny names for git generator',\r\n    HERBACIANKA: 'Handmade shop business card',\r\n    THIS_SITE_CODE: 'Sources of this site',\r\n    AUTHOR: 'Created by NdV66, 2019',\r\n    ERRORS_DESC: {\r\n        ERROR_HEADER: 'Error',\r\n        DATA_SHOULD_BE_STRING: 'Data should be string.',\r\n        DATA_SHOULD_BE_MORSE:  'Data should be morse code.',\r\n        CHAR_DOESNT_EXIST: 'One of the typed chars is not supoported by translator.',\r\n        MORSE_SIGN_ISNT_SUPPORTED: 'One of the typed morse code symbols is not supoported by translator.',\r\n    },\r\n    ABOUT_HEADER: 'About',\r\n    ABOUT_TEXT: {\r\n        APP_HEADER: `<h4>This app</h4>`,\r\n        APP: `This page is created to demonstrate how the morse code work and how fun it is.\r\n            Now it could be only hobby for you, but in the past to know it was the base to send the quick messages to the people, who were living very far from you.\r\n            If you want, you can try to learn it or just have fun with this translator.\r\n            This project supports translate from and to this code system, using the text areas above.`,\r\n        AUTHOR_HEADER: `<h4>Author</h4>`,\r\n        AUTHOR: `My nickname is Narin and i am a front-end devloper for few years.\r\n                I like this job, I like its weird technologies - like ReactJS or pure JavaScript.\r\n                For me it is really nice to create something for end users.\r\n                If you prefer to see more of my project, look at the footer of this page. There are the links to them and to my GitHub.`,\r\n    },\r\n    HELP_HEADER: 'Help',\r\n    HELP_TEXT: {\r\n        USING_HEADER: `<h4>Usage</h4>`,\r\n        USING: `To translate from 'normal' text to morse code, type text in <strong>'Common Text' textarea</strong>.\r\n            Then click <strong>'Translate' button</strong> - the result will be as 'common' text, able to read.\r\n            For the other case, click <strong>'Swap' button</strong>. This will change the order ot the text areas.\r\n            Now the <strong>'Morse Code' text area</strong> is first. Type there your morse code and then click <strong>'Translate' Button</strong>.`,\r\n        FORMAT_HEADER: `<h4>Formatting</h4>`,\r\n        FORMAT: `One typed space is equal to space between words in text or code.`,\r\n    },\r\n};\r\n\r\nexport default TEXTS;","import React from 'react';\r\nimport { MdAutorenew, MdFavoriteBorder } from 'react-icons/md';\r\nimport { Button } from 'reactstrap';\r\nimport TEXTS from '../../../../../entities/consts/Texts';\r\nimport styles from './ButtonPanel.module.scss';\r\n\r\nconst ButtonPanel = (props) => <div className='mt-3 mb-3 text-right'>\r\n    <Button onClick={props.onClickTranslateButton} color='primary' className={styles.button_in_panel}>\r\n        <MdFavoriteBorder />\r\n        {TEXTS.TRANSLATE}\r\n    </Button>\r\n    <Button onClick={props.onClickSwapButton} color='primary' className={styles.button_in_panel}>\r\n        <MdAutorenew />\r\n        {TEXTS.SWAP}\r\n    </Button>\r\n</div>;\r\n\r\nexport default ButtonPanel;","export const ELEMENTS_ID = {\r\n    HOME: 'home',\r\n    ABOUT: 'about',\r\n    HELP: 'help',\r\n    TRANSLATOR: 'translator',\r\n};\r\n\r\nconst HOME = '/';\r\nconst createLink = (element) => `${HOME}#${ELEMENTS_ID[element]}`;\r\n\r\nconst PATHS = {\r\n    HOME,\r\n    ABOUT: createLink('ABOUT'),\r\n    HELP: createLink('HELP'),\r\n    TRANSLATOR: createLink('TRANSLATOR'),\r\n    GITHUB: 'https://github.com/NdV66',\r\n    BE_STAR_ONLINE: 'https://ndv66.github.io/beStarOnline/#/',\r\n    MY_SITE: 'https://ndv66.github.io/',\r\n    DEV_NAMES_GENERATOR: 'https://github.com/NdV66/DevNamesGenerator',\r\n    HERBACIANKA: 'https://herbacianka.herokuapp.com/',\r\n    THIS_SITE_CODE: 'https://github.com/NdV66/morse-code',\r\n};\r\n\r\n\r\nexport default PATHS;\r\n","import React from 'react';\r\nimport { action } from 'mobx';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Container, Col } from 'reactstrap';\r\nimport TextArea from './components/textArea/TextArea';\r\nimport ErrorPopup from '../../common/ErrorPopup';\r\nimport ButtonPanel from './components/buttonPanel/ButtonPanel';\r\nimport { ELEMENTS_ID } from '../../../entities/consts/Paths';\r\nimport TEXTS from '../../../entities/consts/Texts';\r\nimport styles from './translatorPageStyle.module.scss';\r\n\r\n@inject('translatorStore')\r\n@observer\r\nclass TranslatorPage extends React.Component {\r\n    @action.bound\r\n    _handleNormalTextAreaChange(event) {\r\n        this.props.translatorStore.setNormalTextFromEvent(event);\r\n    }\r\n\r\n    @action.bound\r\n    _handleMorseCodeTextAreaChange(event) {\r\n        this.props.translatorStore.setMorseCodeFromEvent(event);\r\n    }\r\n\r\n    @action.bound\r\n    _onClickTranslateButton() {\r\n        try {\r\n           this.props.translatorStore.translate();\r\n        } catch(error) {\r\n            this._handleError(error);\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    _onClickSwapButton() {\r\n       this.props.translatorStore.swapTextAreas();\r\n    }\r\n\r\n    _handleError(error) {\r\n        console.log(error);\r\n        this.props.translatorStore.setErrorCode(error.message);\r\n    }\r\n\r\n    _renderNormalTextArea(store) {\r\n        const id = 'normalText';\r\n        return <TextArea\r\n            id={id}\r\n            value={store.normalText}\r\n            placeholder={TEXTS.TEXT_AREA_PLACEHOLDER}\r\n            onChange={this._handleNormalTextAreaChange}\r\n            title={TEXTS.TEXT_LABEL}\r\n            key={id}\r\n            readOnly={!store.isCommonTextAreaFirst}\r\n        />;\r\n    }\r\n\r\n    _renderMorseTextArea(store) {\r\n        const id = 'morseCodeText';\r\n        return <TextArea\r\n            id={id}\r\n            value={store.morseCode}\r\n            placeholder={TEXTS.MORSE_AREA_PLACEHOLDER}\r\n            onChange={this._handleMorseCodeTextAreaChange}\r\n            title={TEXTS.MORSE_LABEL}\r\n            key='id'\r\n            readOnly={store.isCommonTextAreaFirst}\r\n        />;\r\n    }\r\n\r\n    _renderButtonPanel() {\r\n        return <ButtonPanel\r\n            key='buttonPanel'\r\n            onClickTranslateButton={this._onClickTranslateButton}\r\n            onClickSwapButton={this._onClickSwapButton}\r\n        />;\r\n    }\r\n\r\n    _rendertTextAreaInOrder(store) {\r\n        const normalTextArea = this._renderNormalTextArea(store);\r\n        const morseCodeArea = this._renderMorseTextArea(store);\r\n        const buttonPanel = this._renderButtonPanel(store);\r\n        const {isCommonTextAreaFirst} = store;\r\n        const elements = isCommonTextAreaFirst ? [normalTextArea, buttonPanel, morseCodeArea] : [morseCodeArea, buttonPanel, normalTextArea];\r\n        return elements;\r\n    }\r\n\r\n    _renderErrorPortal() {\r\n        const store = this.props.translatorStore;\r\n        return <ErrorPopup\r\n            isModal={store.isError}\r\n            onCancel={store.eraseErrorCode}\r\n            body={TEXTS.ERRORS_DESC[store.errorCode]}\r\n            header={TEXTS.ERRORS_DESC.ERROR_HEADER}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        const lgCols = {size: 8, offset: 2};\r\n        const mdCols = {size: 12};\r\n        const store = this.props.translatorStore;\r\n        const containerCssClass = `${styles.translator_container} pb-3`;\r\n        const errorPortal = store.isError ? this._renderErrorPortal() : null;\r\n\r\n        return <Container fluid className={containerCssClass} id={ELEMENTS_ID.TRANSLATOR}>\r\n            {errorPortal}\r\n            <Col lg={lgCols} md={mdCols}>\r\n                {this._rendertTextAreaInOrder(store)}\r\n            </Col>\r\n        </Container>;\r\n    }\r\n}\r\n\r\nexport default TranslatorPage;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem } from 'reactstrap';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport TEXTS from '../../entities/consts/Texts';\r\nimport PATHS from '../../entities/consts/Paths';\r\nimport './NavbarApp.scss';\r\nimport styles from './NavbarApp.module.scss';\r\n\r\nconst NavbarItem = (props)=> <NavItem  className='mr-3'>\r\n    <Link smooth to={PATHS[props.name]}>{TEXTS[props.name]}</Link>\r\n</NavItem>;\r\n\r\n@inject('navbarStore')\r\n@observer\r\nclass NavbarApp extends React.Component {\r\n    render() {\r\n        const {navbarStore} = this.props;\r\n        const navbarCssClass = `${styles.custom_toggler} pt-1 pb-1`;\r\n\r\n        return <div>\r\n            <Navbar\r\n            color='faded'\r\n            expand='md'\r\n            light\r\n            fixed='top'\r\n            className={navbarCssClass}>\r\n                <NavbarBrand href='/'>{TEXTS.NAME}</NavbarBrand>\r\n                <NavbarToggler onClick={navbarStore.toggle} />\r\n                <Collapse isOpen={navbarStore.isOpen} navbar className={styles.custom_collapse}>\r\n                    <Nav className='ml-auto' navbar>\r\n                        <NavbarItem name={'TRANSLATOR'} />\r\n                        <NavbarItem name={'ABOUT'} />\r\n                        <NavbarItem name={'HELP'} />\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default NavbarApp;\r\n","const MorseCode = {\r\n    A: '.-',\r\n    B: '-...',\r\n    C: '-.-.',\r\n    D: '-..',\r\n    E: '.',\r\n    F: '..-.',\r\n    G: '--.',\r\n    H: '....',\r\n    I: '..',\r\n    J: '.---',\r\n    K: '-.-',\r\n    L: '.-..',\r\n    M: '--',\r\n    N: '-.',\r\n    O: '---',\r\n    P: '.--.',\r\n    Q: '--.-',\r\n    R: '.-.',\r\n    S: '...',\r\n    T: '-',\r\n    U: '..-',\r\n    V: '...-',\r\n    W: '.--',\r\n    X: '-..-',\r\n    Y: '-.--',\r\n    Z: '--..',\r\n    1: '.----',\r\n    2: '..---',\r\n    3: '...--',\r\n    4: '....-',\r\n    5: '.....',\r\n    6: '-....',\r\n    7: '--...',\r\n    8: '---..',\r\n    9: '----.',\r\n    0: '-----',\r\n    ',': '--..--',\r\n    '.': '.-.-.-',\r\n    '?': '..--..',\r\n    ';': '-.-.-',\r\n    ':': '---...',\r\n    '/': '-..-.',\r\n    '-': '-....-',\r\n    \"'\": '.----.',\r\n    '()': '-.--.-',\r\n    '_': '..--.-',\r\n    '@': '.--.-.',\r\n    ' ': '.......'\r\n};\r\n\r\nexport const CHAR_NOT_EXISTS = 'CHAR_NOT_EXISTS';\r\nexport const ONE_DOT_TIME_MS = 100;\r\nexport const SPACE_BETWEEN_CHARS = ' ';\r\nexport const CHAR_IN_ELEMETS_SPACE = ONE_DOT_TIME_MS;\r\nexport const CHAR_SPACE = 3 * ONE_DOT_TIME_MS;\r\nexport const WORD_SPACE = 7 * ONE_DOT_TIME_MS;\r\nexport const MORSE_CODE_PATTERN = /^((-|\\.)+((-|\\.)+|\\s{1})?)+$/g;\r\n\r\nexport default MorseCode;\r\n","const ERRORS_CODE = {\r\n    'DATA_SHOULD_BE_STRING': 'DATA_SHOULD_BE_STRING',\r\n    'DATA_SHOULD_BE_MORSE': 'DATA_SHOULD_BE_MORSE',\r\n    'CHAR_DOESNT_EXIST': 'CHAR_DOESNT_EXIST',\r\n    'MORSE_SIGN_ISNT_SUPPORTED': 'MORSE_SIGN_ISNT_SUPPORTED',\r\n};\r\n\r\nexport default ERRORS_CODE;","export const MESSAGE_TYPES = {\r\n    TEXT: 'TEXT',\r\n    MORSE: 'MORSE',\r\n    UNDEFINED: 'UNDEFINED',\r\n};\r\n\r\nexport default class Message {\r\n    constructor(type = MESSAGE_TYPES.UNDEFINED, text = '') {\r\n        this._text = text;\r\n        this._type = type;\r\n    }\r\n\r\n    set text(text) {\r\n        this._text = text;\r\n    }\r\n\r\n    get text() {\r\n        return this._text;\r\n    }\r\n}\r\n","import Message, {MESSAGE_TYPES} from './Message';\r\nimport ERRORS_CODE from '../consts/ErrorsCode';\r\nimport { MORSE_CODE_PATTERN } from '../consts/MorseCodeMapping';\r\n\r\nexport default class MorseMessage extends Message {\r\n    constructor(text) {\r\n        super(MESSAGE_TYPES.MORSE, text);\r\n    }\r\n\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Save morse code (as string)\r\n     * @param {string} text - morse code as string (only \\s, - and . allowed)\r\n     */\r\n    set text(text) {\r\n        if(text === '' || MORSE_CODE_PATTERN.test(text)) {\r\n            this._text = text;\r\n        } else {\r\n            throw new Error(ERRORS_CODE.DATA_SHOULD_BE_MORSE);\r\n        }\r\n    }\r\n}","import MorseCode, { SPACE_BETWEEN_CHARS } from '../consts/MorseCodeMapping';\r\nimport ERRORS_CODE from '../consts/ErrorsCode';\r\nimport MorseMessage from '../models/MorseMessage';\r\n\r\nclass TextToMorseTranslator {\r\n    /**\r\n     * Translate \"normal\" text to morse code.\r\n     * @param {string} textMessage\r\n     * @throws {Error} CHAR_DOESNT_EXIST\r\n     * @returns {Array} array where each element is one sign from morse code\r\n     */\r\n    _mapTextToMorse(textMessage) {\r\n        const translated = [];\r\n        const textMessageChars = textMessage.split('');\r\n\r\n        for(const char of textMessageChars) {\r\n            const morseCodeChar = MorseCode[char.toUpperCase()];\r\n            if (!morseCodeChar) {\r\n                throw new Error(ERRORS_CODE.CHAR_DOESNT_EXIST);\r\n            }\r\n            translated.push(morseCodeChar);\r\n        }\r\n\r\n        return translated;\r\n    }\r\n\r\n    /**\r\n     * Join morse code as array to string.\r\n     * @param {Array} morseCode morse code as array\r\n     * @param {string} separator separator to join the array\r\n     */\r\n    _joinMorseCodeFromArray(morseCode, separator = SPACE_BETWEEN_CHARS) {\r\n        return morseCode.join(separator);\r\n    }\r\n\r\n    /**\r\n     * Map \"normal\" text to morse code and save it in param object.\r\n     * @param {Message} textMessage - object from class extends class Message\r\n     * @return {Array} morseCode\r\n     */\r\n    translate(textMessage, joinToString = true) {\r\n        let translated = this._mapTextToMorse(textMessage.text);\r\n        translated = joinToString ? this._joinMorseCodeFromArray(translated) : translated;\r\n        return new MorseMessage(translated);\r\n    }\r\n}\r\n\r\nexport const textToMorseTranslator = new TextToMorseTranslator();\r\n","import Message, {MESSAGE_TYPES} from './Message';\r\nimport ERRORS_CODE from '../consts/ErrorsCode';\r\n\r\nexport default class TextMessage extends Message {\r\n    constructor(text) {\r\n        super(MESSAGE_TYPES.TEXT, text);\r\n    }\r\n\r\n    set text(text) {\r\n        if(text === '' || text === 0 || !!text) {\r\n            this._text = text.toString();\r\n        } else {\r\n            throw new Error(ERRORS_CODE.DATA_SHOULD_BE_STRING);\r\n        }\r\n    }\r\n\r\n    get text() {\r\n        return this._text;\r\n    }\r\n}","import ERRORS_CODE from '../consts/ErrorsCode';\r\n\r\nconst LEFT_NODE_SIGN = '.';\r\nconst RIGHT_NODE_SIGN = '-';\r\nexport const EMPTY_SYMBOL = '';\r\n\r\nexport default class TreeNode {\r\n    constructor(leftNode, rightNode, symbol = 'START', chars = [], currentIndex = 0) {\r\n        this.leftNode = leftNode;\r\n        this.rightNode = rightNode;\r\n        this.chars = chars;\r\n        this.currentIndex = currentIndex;\r\n        this.symbol = symbol;\r\n        this.parent = null;\r\n        this.foundNode = null;\r\n    }\r\n\r\n    _setDataInNextNode(node) {\r\n        node.chars = this.chars;\r\n        node.currentIndex = this.currentIndex + 1;\r\n        node.parent = this;\r\n    }\r\n\r\n    _goToNode(currentChar, isFinish) {\r\n        if(currentChar === LEFT_NODE_SIGN && this.leftNode) {\r\n            this._goToLeftNode();\r\n        } else if(currentChar === RIGHT_NODE_SIGN && this.rightNode) {\r\n            this._goToRightNode();\r\n        } else if(isFinish && this.symbol === EMPTY_SYMBOL) {\r\n            throw new Error(ERRORS_CODE.MORSE_SIGN_ISNT_SUPPORTED);\r\n        } else {\r\n            throw new Error(ERRORS_CODE.MORSE_SIGN_ISNT_SUPPORTED);\r\n        }\r\n    }\r\n\r\n    _findInNodes() {\r\n        const currentChar = this.chars[this.currentIndex];\r\n        const isFinish = this.currentIndex === this.chars.length;\r\n        return isFinish ? isFinish : this._goToNode(currentChar);\r\n    }\r\n\r\n    _startNextNode(node) {\r\n        this._setDataInNextNode(node);\r\n        node.findSymbol();\r\n    }\r\n\r\n    _goToLeftNode() {\r\n        this._startNextNode(this.leftNode);\r\n    }\r\n\r\n    _goToRightNode() {\r\n        this._startNextNode(this.rightNode);\r\n    }\r\n\r\n    findSymbol() {\r\n        const isNodeFound = this._findInNodes();\r\n        if(isNodeFound) {\r\n            this.parent.foundNode = this;\r\n        } else if(this.parent) {\r\n            this.parent.foundNode = this.foundNode;\r\n        }\r\n        return this.foundNode;\r\n    }\r\n}\r\n","import TreeNode, {EMPTY_SYMBOL} from './MorseTreeNode';\r\n\r\nconst NODES_WITHOUT_CHILDRENS = ['5', '4', '3', '2', '+', '1', '6', '=', '/', '7', '8', '9', '0', 'f', 'l', 'p', 'c', 'y', 'q'];\r\n\r\n/**\r\n *\r\n * @param {Array<char>} symbols - array of chars of nodes wothout children\r\n */\r\nconst createNodesWithoutChildren = (symbols) => {\r\n    const result = {};\r\n    for(const symbol of symbols) {\r\n        result[symbol] = new TreeNode(null, null, symbol);\r\n    }\r\n    return result;\r\n};\r\n\r\nconst nodesWithoutChildrens = createNodesWithoutChildren(NODES_WITHOUT_CHILDRENS);\r\n\r\nconst emptyU2 = new TreeNode(null, nodesWithoutChildrens['2'], EMPTY_SYMBOL);\r\nconst emptyO90 = new TreeNode(nodesWithoutChildrens['9'], nodesWithoutChildrens['0'], EMPTY_SYMBOL);\r\nconst emptyO8 = new TreeNode(nodesWithoutChildrens['8'], null, EMPTY_SYMBOL);\r\nconst emptyREmpty = new TreeNode(nodesWithoutChildrens['+'], null, EMPTY_SYMBOL);\r\n\r\nconst v = new TreeNode(null, nodesWithoutChildrens['3'], 'v');\r\nconst h = new TreeNode(nodesWithoutChildrens['5'], nodesWithoutChildrens['4'], 'h');\r\nconst j = new TreeNode(null, nodesWithoutChildrens['1'], 'j');\r\nconst b = new TreeNode(nodesWithoutChildrens['6'], nodesWithoutChildrens['='], 'b');\r\nconst x = new TreeNode(nodesWithoutChildrens['/'], null, 'x');\r\nconst z = new TreeNode(nodesWithoutChildrens['7'], null, 'z');\r\n\r\nconst s = new TreeNode(h, v, 's');\r\nconst u = new TreeNode(nodesWithoutChildrens['f'], emptyU2, 'u');\r\nconst r = new TreeNode(nodesWithoutChildrens['l'], emptyREmpty, 'r');\r\nconst w = new TreeNode(nodesWithoutChildrens['p'], j, 'w');\r\nconst o = new TreeNode(emptyO8, emptyO90, 'o');\r\nconst g = new TreeNode(z, nodesWithoutChildrens['q'], 'g');\r\nconst k = new TreeNode(nodesWithoutChildrens['c'], nodesWithoutChildrens['y'], 'k');\r\nconst d = new TreeNode(b, x, 'd');\r\n\r\nconst i = new TreeNode(s, u, 'i');\r\nconst a = new TreeNode(r, w, 'a');\r\nconst m = new TreeNode(g, o, 'm');\r\nconst n = new TreeNode(d, k, 'n');\r\n\r\nconst t = new TreeNode(n, m, 't');\r\nconst e = new TreeNode(i, a, 'e');\r\n\r\nconst start = new TreeNode(e, t);\r\n\r\n/**\r\n * Search and find (if exist) for symbol in normal text from morse code\r\n * @param {Array<char>} chars - array of single chars from morse code sign\r\n * @param {boolean} upperCased - result should be return as upper case or not\r\n */\r\nexport const searchSymbol = (chars, upperCased = true) => {\r\n    start.chars = chars;\r\n    const node = start.findSymbol();\r\n    return upperCased ? node.symbol.toUpperCase() : node.symbol;\r\n};","import { SPACE_BETWEEN_CHARS } from '../consts/MorseCodeMapping';\r\nimport TextMessage from '../models/TextMessage';\r\nimport { searchSymbol } from '../models/MorseTree';\r\n\r\n\r\nclass MorseToTextTranslator {\r\n    /**\r\n     * Prepare text (morseCode) to be translated\r\n     * @param {string} morseCode - morse code as string\r\n     * @return {Array<Array<char>>}\r\n     */\r\n    _prepareMorseCodeToTranslate(morseCode) {\r\n        const morseCodeSigns = morseCode.split(SPACE_BETWEEN_CHARS);\r\n        let prepared = [];\r\n        for(const sign of morseCodeSigns) {\r\n            const chars = sign.split('');\r\n            prepared.push(chars);\r\n        }\r\n        return prepared;\r\n    }\r\n\r\n    /**\r\n     * Translate from morse code to normal text\r\n     * @param {Array<Array<char>>} morseCode\r\n     */\r\n    _translateFromMorseCode(morseCode) {\r\n        let text = '';\r\n        for(const sign of morseCode) {\r\n            text += searchSymbol(sign);\r\n        }\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Translate full text in morse code to normal text\r\n     * @param {MorseMessage} morseMessage\r\n     */\r\n    translate(morseMessage) {\r\n        const prepared = this._prepareMorseCodeToTranslate(morseMessage.text);\r\n        const translated = this._translateFromMorseCode(prepared);\r\n        return new TextMessage(translated);\r\n    }\r\n}\r\n\r\nexport const morseToTextTranslator = new MorseToTextTranslator();","import { observable, computed, action } from 'mobx';\r\nimport { textToMorseTranslator } from '../entities/domain/TextToMorseTranslator';\r\nimport { morseToTextTranslator } from '../entities/domain/MorseToTextTranslator';\r\nimport TextMessage from '../entities/models/TextMessage';\r\nimport MorseMessage from '../entities/models/MorseMessage';\r\n\r\nclass TranslatorStore {\r\n    @observable\r\n    normalText = '';\r\n\r\n    @observable\r\n    morseCode = '';\r\n\r\n    @observable\r\n    isErrorPopupShowed = false;\r\n\r\n    @observable\r\n    isCommonTextAreaFirst = true;\r\n\r\n    @observable\r\n    errorCode = '';\r\n\r\n    @computed\r\n    get isError() {\r\n        return !!this.errorCode;\r\n    }\r\n\r\n    /**\r\n     * @throws {Error} CHAR_DOESNT_EXIST from translator\r\n     * @return {MorseMessage} morseMessage as string\r\n     */\r\n    @computed\r\n    get translatedToMorseCode() {\r\n        const message = new TextMessage(this.normalText);\r\n        return textToMorseTranslator.translate(message);\r\n    }\r\n\r\n    @computed\r\n    get translatedToNormalText() {\r\n        const message = new MorseMessage(this.morseCode);\r\n        return morseToTextTranslator.translate(message);\r\n    }\r\n\r\n    @action.bound\r\n    translateToMorseCode() {\r\n        const message = this.translatedToMorseCode;\r\n        this.morseCode = message.text;\r\n    }\r\n\r\n    @action.bound\r\n    translateToNormalText() {\r\n        const message = this.translatedToNormalText;\r\n        this.normalText = message.text;\r\n    }\r\n\r\n    swapTextAreas() {\r\n        this.isCommonTextAreaFirst = !this.isCommonTextAreaFirst;\r\n    }\r\n\r\n    translate()  {\r\n        this.isCommonTextAreaFirst ? this.translateToMorseCode() : this.translateToNormalText();\r\n    }\r\n\r\n    @action\r\n    setNormalTextFromEvent(event) {\r\n        this.normalText = event.target.value;;\r\n    }\r\n\r\n    @action\r\n    setMorseCodeFromEvent(event) {\r\n        this.morseCode = event.target.value;\r\n    }\r\n\r\n    @action.bound\r\n    setErrorCode(errorCode) {\r\n        this.errorCode = errorCode;\r\n    }\r\n\r\n    @action.bound\r\n    eraseErrorCode() {\r\n        this.errorCode = '';\r\n    }\r\n}\r\n\r\nconst translatorStore = new TranslatorStore();\r\n\r\nexport default translatorStore;","import { observable, action } from 'mobx';\r\n\r\nclass NavbarStore {\r\n    @observable\r\n    isOpen = false;\r\n\r\n    @action.bound\r\n    toggle() {\r\n        this.isOpen = !this.isOpen;\r\n    }\r\n}\r\n\r\nconst navbarStore = new NavbarStore();\r\n\r\nexport default navbarStore;","import React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport createBiggerIcon from './BiggerIcon';\r\n\r\nclass DescriptionPanel extends React.Component {\r\n    _createElement(key, content) {\r\n        return <p key={key} dangerouslySetInnerHTML={{__html: content}} />;\r\n    }\r\n\r\n    _createParagraphs(texts) {\r\n        const result = [];\r\n        for(const key in texts) {\r\n            const element = this._createElement(key, texts[key]);\r\n            result.push(element);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        const cssClassName = `${this.props.className} base-top-bottom-padding`;\r\n        const BiggerIcon = createBiggerIcon(this.props.icon);\r\n\r\n        return <Container fluid id={this.props.id} className={cssClassName}>\r\n            <h2 className='text-center mb-3'>\r\n                {this.props.header}\r\n            </h2>\r\n            <div className='text-justify'>\r\n                {this._createParagraphs(this.props.texts)}\r\n            </div>\r\n            <BiggerIcon className={this.props.iconClassName || ''} />\r\n        </Container>;\r\n    }\r\n}\r\n\r\nexport default DescriptionPanel;","import React from 'react';\r\n\r\nexport default (Component) => {\r\n    return (props) => <div className={`${props.className || ''} bigger-icon text-center`}>\r\n        <Component {...props} />\r\n    </div>;\r\n};\r\n","import React from 'react';\r\nimport DescriptionPanel from '../../common/DescriptionPanel';\r\nimport { ELEMENTS_ID } from '../../../entities/consts/Paths';\r\nimport TEXTS from '../../../entities/consts/Texts.js';\r\nimport { MdLocalFlorist } from 'react-icons/md';\r\nimport styles from './AboutPage.module.scss';\r\n\r\nconst AboutPage = () => <DescriptionPanel\r\n    id={ELEMENTS_ID.ABOUT}\r\n    header={TEXTS.ABOUT_HEADER}\r\n    texts={TEXTS.ABOUT_TEXT}\r\n    className={styles.about_page}\r\n    icon={MdLocalFlorist}\r\n/>;\r\n\r\nexport default AboutPage;","import React from 'react';\r\nimport DescriptionPanel from '../../common/DescriptionPanel';\r\nimport { ELEMENTS_ID } from '../../../entities/consts/Paths';\r\nimport TEXTS from '../../../entities/consts/Texts.js';\r\nimport { MdHelp } from 'react-icons/md';\r\nimport styles from './HelpPage.module.scss';\r\n\r\nconst HelpPage = () => <DescriptionPanel\r\n    id={ELEMENTS_ID.HELP}\r\n    header={TEXTS.HELP_HEADER}\r\n    texts={TEXTS.HELP_TEXT}\r\n    className={styles.help_page}\r\n    icon={MdHelp}\r\n    iconClassName={styles.help_icon}\r\n/>;\r\n\r\nexport default HelpPage;","import React from 'react';\r\nimport { Container, Col, Row } from 'reactstrap';\r\nimport { MdLocalActivity } from 'react-icons/md';\r\nimport TEXTS from '../../../entities/consts/Texts';\r\nimport PATHS from '../../../entities/consts/Paths';\r\nimport styles from './Footer.module.scss';\r\n\r\nconst footerCssClass = `${styles.footer} pb-3 pt-3`;\r\n\r\nconst ProjectLink = (props) => <Col md='12' className='no-spaces'>\r\n    <a href={PATHS[props.id]}>\r\n        <MdLocalActivity />{TEXTS[props.id]}\r\n    </a>\r\n</Col>;\r\n\r\nexport const Footer = () => <Container fluid className={footerCssClass}>\r\n    <Row>\r\n        <Col sm='12' md='6'>\r\n            <h4>\r\n                <a href={PATHS.GITHUB}>{TEXTS.GITHUB}</a>\r\n            </h4>\r\n        </Col>\r\n        <Col sm='12' md='6'>\r\n            <h4>{TEXTS.OTHER_PROJECTS}</h4>\r\n            <ProjectLink id={'BE_STAR_ONLINE'} />\r\n            <ProjectLink id={'MY_SITE'} />\r\n            <ProjectLink id={'DEV_NAMES_GENERATOR'} />\r\n            <ProjectLink id={'HERBACIANKA'} />\r\n            <ProjectLink id={'THIS_SITE_CODE'} />\r\n        </Col>\r\n        <Col md='12'>\r\n            {TEXTS.AUTHOR}\r\n        </Col>\r\n    </Row>\r\n</Container>;","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport { Container } from 'reactstrap';\nimport { IconContext } from \"react-icons\";\nimport TranslatorPage from './pages/translatorPage/TranslatorPage';\nimport NavbarApp from './nav/NavbarApp';\nimport translatorStore from '../stores/translatorStore';\nimport navbarStore from '../stores/navbarStore';\nimport AboutPage from './pages/aboutPage/AboutPage';\nimport HelpPage from './pages/helpPage/HelpPage';\nimport { Footer } from './pages/footer/Footer';\n\nconst iconContextStyle = {\n    className: 'icon-style',\n};\n\nconst App = () => <IconContext.Provider value={iconContextStyle}>\n    <Container fluid className='no-spaces'>\n            <Provider\n                translatorStore={translatorStore}\n                navbarStore={navbarStore}>\n                <Router>\n                    <header>\n                        <NavbarApp />\n                    </header>\n\n                    <main>\n                        <TranslatorPage />\n                        <AboutPage />\n                        <HelpPage />\n                    </main>\n\n                    <footer>\n                        <Footer />\n                    </footer>\n                </Router>\n        </Provider>\n    </Container>\n</IconContext.Provider>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/scss/style.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}